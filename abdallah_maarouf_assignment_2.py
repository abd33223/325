# -*- coding: utf-8 -*-
"""Abdallah_Maarouf_ASSIGNMENT_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lhhpNNmQGYqyxoAWSPycPkfrr3LNyrjx

Note that through the visualization Outcome refers to whether the patient is Diabetic or not where 1 means that the patient is diabetic and 0 means that the patient is not diabetic.
"""

import pandas as pd

# Read the dataset into a DataFrame
df = pd.read_csv("diabetes.csv")
!pip install plotly
import plotly.express as px

fig = px.histogram(df, x='Age', color='Outcome', title='Age Distribution by Outcome')
fig.show()

fig = px.scatter_3d(df, x='Glucose', y='BMI', z='Age', color='Outcome', title='3D Scatter Plot showing relationship between Age,BMI, Glucose and Outcome')
fig.show()

import plotly.express as px

# Create a scatter plot with color and size transformations
fig = px.scatter(df, x='Glucose', y='BMI', color='Age', size='Pregnancies',
                 title='Glucose, BMI with Age and Pregnancies Transformations vs Outcome',
                 labels={'Glucose': 'Glucose Level', 'BMI': 'BMI'},
                 hover_name='Outcome')

# Show the interactive plot
fig.show()

import plotly.express as px

# Sort the DataFrame by the "Insulin" column in increasing order
df_sorted = df.sort_values(by="Insulin")

# Create an animated scatter plot with Age, Outcome, and Insulin
fig = px.scatter(df_sorted, x="BMI", y="Outcome", animation_frame="Insulin", animation_group="Outcome",
                 size="BMI", color="BMI",
                 labels={"Age": "Age", "Outcome": "Diabetes Outcome", "Insulin": "Insulin"},
                 title="Animated Scatter Plot of BMI vs. Diabetes Outcome with Insulin level in Animation")

# Customize the appearance of the plot (optional)
fig.update_traces(marker=dict(size=10),
                  selector=dict(mode='markers+text'))

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Assuming you have already loaded the "diabetes" DataFrame

# Filter the DataFrame for Outcome 0 and create a density heatmap
fig_outcome_0 = px.density_heatmap(df[df['Outcome'] == 0], x='DiabetesPedigreeFunction', y='BMI',
                                   labels={'DiabetesPedigreeFunction': 'Diabetes Pedigree Function', 'BMI': 'BMI'},
                                   title='Density Heatmap of Diabetes Pedigree Function vs. BMI (When non Diabetic)')

# Filter the DataFrame for Outcome 1 and create a density heatmap
fig_outcome_1 = px.density_heatmap(df[df['Outcome'] == 1], x='DiabetesPedigreeFunction', y='BMI',
                                   labels={'DiabetesPedigreeFunction': 'Diabetes Pedigree Function', 'BMI': 'BMI'},
                                   title='Density Heatmap of Diabetes Pedigree Function vs. BMI (When Diabetic )')

# Show the two density heatmaps side by side (you can customize the layout)
fig_outcome_0.show()
fig_outcome_1.show()